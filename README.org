
* SQLite Python Example

  Taken from [[http://zetcode.com/db/sqlitepythontutorial/][here]].

** Create an Empty Database

   This creates a database [[/tmp/test_db.db]]
   (taken from [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.html][the org manual]])

   #+name: sqlite-populate-test
   #+header: :results silent
   #+header: :dir /tmp/
   #+header: :db test_db.db
   #+begin_src sqlite
     drop table if exists greeting;
     create table greeting(
         one varchar(10) not null,
         two varchar(10),
         lang char(2) not null,
         country char(2),
         primary key (lang, country)
     );

     -- give some content
     insert into greeting values('Good', 'day!', 'en', 'UK');
     insert into greeting values('G''day', '', 'en', 'AU');
     insert into greeting values('Guten', 'Tag!', 'de', 'DE');
     insert into greeting values('Dobrý', 'den!', 'cz', 'CZ');
     insert into greeting values('Bonjour', null, 'fr', null);
   #+end_src

   Check whether it worked
   #+name: sqlite-hello
   #+header: :list
   #+header: :separator \
   #+header: :results raw
   #+header: :dir /tmp/
   #+header: :db test_db.db
   #+begin_src sqlite
     -- select * from greeting;
     select '|', g.lang, '|', g.one, g.two, '|' from greeting as g;
   #+end_src

   #+RESULTS: sqlite-hello
   | en | Hello world! |
   | de | Hallo Welt!  |
   | cz | Dobrý den!   |
   | fr | Bonjour      |

*** Alternatively via Commandline
    #+BEGIN_SRC shell-script
      sqlite3 /tmp/test_db.db
    #+END_SRC

    There enter ~.tables~ and ~.exit~

*** Further Adding Data from Org Mode

    #+NAME: further_greetings
    | one   | two  | lang | country |
    |-------+------+------+---------|
    | Goede | dag! | nl   | NL      |
    | God   | dag! | dk   | DK      |
    | God   | dag! | se   | SE      |

    #+begin_src sqlite :db /tmp/test_db.db :var orgtable=further_greetings :colnames yes
      .mode csv greeting
      -- for modes see
      --   http://www.tutorialspoint.com/sqlite/sqlite_commands.htm
      .import $orgtable greeting
      select one, count(*) from greeting group by one;
    #+end_src

    #+RESULTS:
    | one     | count(*) |
    |---------+----------|
    | Bonjour |        1 |
    | Dobrý   |        1 |
    | G'day   |        1 |
    | God     |        2 |
    | Goede   |        1 |
    | Good    |        1 |
    | Guten   |        1 |

*** A Little More Detail

    Taken from [[http://www.thegeekstuff.com/2012/09/sqlite-command-examples/][here]].

**** Connect more Databases / In-Memory Databases

     #+BEGIN_SRC sqlite :db /tmp/test_db.db
       -- add a in-memory db
       attach database ':memory:' as mem_db;
       .database
     #+END_SRC

     #+RESULTS:
     | seq  name             file                                                       |
     | ---  ---------------  ---------------------------------------------------------- |
     | 0    main             /tmp/test_db.db                                            |
     | 2    mem_db                                                                      |

**** Add Triggers on Changes

     #+BEGIN_SRC sqlite
       create trigger employee_update_trg after update on employee
       begin
         update employee set updatedon = datetime('NOW') where rowid = new.rowid;
       end;
     #+END_SRC

**** Further Datetime Functions

     Allow for proper formatting:

     #+BEGIN_SRC sqlite
       select empid,strftime('%d-%m-%Y %w %W',updatedon) from employee;
     #+END_SRC

**** Performance Information about Queries

     Use ~explain~ as in

     #+BEGIN_SRC sqlite :db /tmp/test_db.db
       explain query plan select * from empdept;
       explain select empid,strftime('%d-%m-%Y %w %W',updatedon) from employee;
     #+END_SRC

** Access via Python

   #+BEGIN_SRC python :results output raw :exports none
     import sqlite3

     dbase = "/tmp/test_db.db"


     def create_data(con):
         """Create some data in the db"""
         cur = con.cursor()
         # Begin with empty table
         cur.execute("DROP TABLE IF EXISTS Cars")

         cur.execute("""CREATE TABLE Cars(
           Id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
           Name TEXT,
           Language CHAR(2),
           Price INT
         )""")

         # https://www.xkcd.com/327/
         sql_injection_attack = (
             "; ".join([
                 "'Bobby Tables', 'XK', 0)",
                 "DROP TABLE Greeting",
                 "INSERT INTO Cars VALUES('https://www.xkcd.com/327'"]), 'CD',
             327)

         cars = [
             ('Audi', 'de', 52642),
             ('Mercedes', 'de', 57127),
             ('Skoda', 'cz', 9000),
             ('Volvo', 'se', 29000),
             ('Bentley', 'en', 350000),
             ('Citroen', 'fr', 21000),
             ('Hummer', 'en', 41400),
             sql_injection_attack,
             ('Volkswagen', 'de', 21600)]

         cur.executemany('''
             INSERT INTO cars(Name, Language, Price) VALUES(?,?,?)''', cars)

     with sqlite3.connect(dbase) as connection:
         create_data(connection)


     with sqlite3.connect(dbase) as connection:
         cursor = connection.cursor()
         # Try SQL injection ... Gives:
         # sqlite3.Warning: You can only execute one statement at a time.
         # cursor.execute("INSERT INTO Cars(Name, Language, Price) VALUES({0}, {1}, {2})".format(
         #     *sql_injection_attack))

         # Therefore we might as well delete the entry
         name_to_delete = "DROP TABLE"
         # Approach I: Do search in application
         cursor.execute(
             "select Id, Name from cars")
         idx_to_delete = [row[0] for row in cursor
                          if name_to_delete in row[1]]
         # Approach II: Do search on database
         # (Faster but maybe not database independent)
         # See here for commands:
         #     [[http://www.sqlite.org/lang_corefunc.html]]
         cursor.execute(
             # Note: This is case insensitive
             "select Id FROM cars WHERE Name LIKE ?",
             ("%{0}%".format(name_to_delete), ))
         idx_to_delete = [row[0] for row in cursor]

         # Delete the entries
         for idx in idx_to_delete:
             cursor.execute(
                 "Delete from cars where id = ?", (int(idx), ))
   #+END_SRC

   #+RESULTS:

*** Check in SQL

    You can now ~sqlite3 /tmp/test_db.db~ and

    See also [[https://www.sqlite.org/cli.html][online]] for the possible sql commands.

    #+name: sqlite-check-py-input
    #+begin_src sqlite :db /tmp/test_db.db :colnames yes
      .mode csv greeting
      SELECT * FROM Greeting;

      .print '----', '----', '----', '----'
      .mode csv cars
      SELECT * FROM Cars;
    #+END_SRC

    #+RESULTS: sqlite-check-py-input
    | one     | two        | lang     | country |
    |---------+------------+----------+---------|
    | Good    | day!       | en       | UK      |
    | G'day   |            | en       | AU      |
    | Guten   | Tag!       | de       | DE      |
    | Dobrý   | den!       | cz       | CZ      |
    | Bonjour |            | fr       |         |
    | Goede   | dag!       | nl       | NL      |
    | God     | dag!       | dk       | DK      |
    | God     | dag!       | se       | SE      |
    | ----    | ----       | ----     | ----    |
    | Id      | Name       | Language | Price   |
    | 1       | Audi       | de       | 52642   |
    | 2       | Mercedes   | de       | 57127   |
    | 3       | Skoda      | cz       | 9000    |
    | 4       | Volvo      | se       | 29000   |
    | 5       | Bentley    | en       | 350000  |
    | 6       | Citroen    | fr       | 21000   |
    | 7       | Hummer     | en       | 41400   |
    | 9       | Volkswagen | de       | 21600   |

    And to get some info about the tables
    #+begin_src sqlite :db /tmp/test_db.db :colnames yes
      pragma table_info(Cars);
    #+END_SRC

    #+RESULTS:
    | cid | name     | type    | notnull | dflt_value | pk |
    |-----+----------+---------+---------+------------+----|
    |   0 | Id       | INTEGER |       1 |            |  1 |
    |   1 | Name     | TEXT    |       0 |            |  0 |
    |   2 | Language | CHAR(2) |       0 |            |  0 |
    |   3 | Price    | INT     |       0 |            |  0 |

    #+begin_src sqlite :db /tmp/test_db.db :colnames yes
      pragma table_info(greeting);
    #+END_SRC

    #+RESULTS:
    | cid | name    | type        | notnull | dflt_value | pk |
    |-----+---------+-------------+---------+------------+----|
    |   0 | one     | varchar(10) |       1 |            |  0 |
    |   1 | two     | varchar(10) |       0 |            |  0 |
    |   2 | lang    | char(2)     |       1 |            |  1 |
    |   3 | country | char(2)     |       0 |            |  2 |

    #+begin_src sqlite :db /tmp/test_db.db :results code
      -- show the main db schema
      .schema sqlite_master
    #+END_SRC

    #+RESULTS:
    #+BEGIN_SRC sqlite
    CREATE TABLE sqlite_master (
      type text,
      name text,
      tbl_name text,
      rootpage integer,
      sql text
    );
    #+END_SRC

* Literature and References

** SQLite

*** Core Functions

    [[http://www.sqlite.org/lang_corefunc.html]]
